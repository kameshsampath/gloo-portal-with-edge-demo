---
AWSTemplateFormatVersion: "2010-09-09"
Description: VPC and network configuration for an EKS cluster.

Parameters:
  Name:
    Type: String
    Default: kameshs-gloo-demos
    Description: AWS EKS Cluster Name, the cluster name will be used as VPC/Subnet suffix.

  VpcCidr:
    Type: String
    Default: 172.25.0.0/16
    Description: The CIDR to use for the VPC

  PrivateSubneta:
    Type: String
    Default: 172.25.1.0/24
    Description: The CIDR to use for private subnet in region Zone A

  PrivateSubnetb:
    Type: String
    Default: 172.25.2.0/24
    Description: The CIDR to use for private subnet in region Zone B

  PrivateSubnetc:
    Type: String
    Default: 172.25.3.0/24
    Description: The CIDR to use for private subnet in region Zone C

  PublicSubneta:
    Type: String
    Default: 172.25.5.0/24
    Description: The CIDR to use for public subnet in region Zone A

  PublicSubnetb:
    Type: String
    Default: 172.25.6.0/24
    Description: The CIDR to use for public subnet in region Zone B

  PublicSubnetc:
    Type: String
    Default: 172.25.7.0/24
    Description: The CIDR to use for public subnet in region Zone C

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCidr
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Sub "${Name}-vpc"
  
  InternetGateway:
    Type: "AWS::EC2::InternetGateway"
    Properties:
      Tags:
        - Key: Name
          Value: !Sub "${Name}-igw"

  VPCGatewayAttachment:
    Type: "AWS::EC2::VPCGatewayAttachment"
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub "${Name}-public-rt"
        - Key: Network
          Value: Public
  
  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
    DependsOn: 
      - VPCGatewayAttachment

  PrivateRouteTableAZ1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub "${Name}-private-rt-zone1"
        - Key: Network
          Value: PrivateSubnetAZ1

  PrivateRouteTableAZ2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub "${Name}-private-rt-zone2"
        - Key: Network
          Value: PrivateSubnetAZ2

  PrivateRouteTableAZ3:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub "${Name}-private-rt-zone3"
        - Key: Network
          Value: PrivateSubnetAZ3

  PrivateRouteAZ1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTableAZ1
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGatewayAZ1
    DependsOn:
      - NatGatewayAZ1

  PrivateRouteAZ2:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTableAZ2
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGatewayAZ2
    DependsOn:
      - NatGatewayAZ2

  PrivateRouteAZ3:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTableAZ3
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGatewayAZ3
    DependsOn:
      - NatGatewayAZ3

  NatGatewayAZ1:
    DependsOn:
      - NatGatewayEIPA
      - PublicSubnetAZ1
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt "NatGatewayEIPA.AllocationId"
      SubnetId: !Ref PublicSubnetAZ1
      Tags:
        - Key: Name
          Value: !Sub "${Name}-natgateway-az1"

  NatGatewayAZ2:
    DependsOn:
      - NatGatewayEIPB
      - PublicSubnetAZ2
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt "NatGatewayEIPB.AllocationId"
      SubnetId: !Ref PublicSubnetAZ2
      Tags:
        - Key: Name
          Value: !Sub "${Name}-natgateway-az2"

  NatGatewayAZ3:
    DependsOn:
      - NatGatewayEIPC
      - PublicSubnetAZ3
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt "NatGatewayEIPC.AllocationId"
      SubnetId: !Ref PublicSubnetAZ3
      Tags:
        - Key: Name
          Value: !Sub "${Name}-natgateway-az3"

  NatGatewayEIPA:
    DependsOn:
      - VPCGatewayAttachment
    Type: "AWS::EC2::EIP"
    Properties:
      Domain: vpc
      Tags: 
       - Key: Name
         Value: !Sub "${Name}-eip-a"

  NatGatewayEIPB:
    DependsOn:
      - VPCGatewayAttachment
    Type: "AWS::EC2::EIP"
    Properties:
      Domain: vpc
      Tags: 
       - Key: Name
         Value: !Sub "${Name}-eip-b"

  NatGatewayEIPC:
    DependsOn:
      - VPCGatewayAttachment
    Type: "AWS::EC2::EIP"
    Properties:
      Domain: vpc
      Tags: 
       - Key: Name
         Value: !Sub "${Name}-eip-c"

  PublicSubnetAZ1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0,!GetAZs ]
      CidrBlock: !Ref PublicSubneta
      Tags:
        - Key: Name
          Value: !Sub "${Name}-subnet-zone1"

  PublicSubnetAZ1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetAZ1
      RouteTableId: !Ref PublicRouteTable

  PublicSubnetAZ2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1,!GetAZs ]
      CidrBlock: !Ref PublicSubnetb
      Tags:
        - Key: Name
          Value: !Sub "${Name}-subnet-zone2"

  PublicSubnetAZ2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetAZ2
      RouteTableId: !Ref PublicRouteTable

  PublicSubnetAZ3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 2,!GetAZs ]
      CidrBlock: !Ref PublicSubnetc
      Tags:
        - Key: Name
          Value: !Sub "${Name}-subnet-zone3"

  PublicSubnetAZ3RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetAZ3
      RouteTableId: !Ref PublicRouteTable

  PrivateSubnetAZ1:
    Type: AWS::EC2::Subnet
    Metadata:
      Comment: Subnet AZ 1
    Properties:
      AvailabilityZone: !Select [ 0,!GetAZs ]
      CidrBlock:
        Ref: PrivateSubneta
      VpcId:
        Ref: VPC
      Tags:
        - Key: Name
          Value: !Sub "${Name}-private-subnet-zone1"
        - Key: "kubernetes.io/role/internal-elb"
          Value: 1

  PrivateSubnetAZ1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnetAZ1
      RouteTableId: !Ref PrivateRouteTableAZ1

  PrivateSubnetAZ2:
    Type: AWS::EC2::Subnet
    Metadata:
      Comment: Subnet AZ 2
    Properties:
      AvailabilityZone: !Select [ 1,!GetAZs ]
      CidrBlock:
        Ref: PrivateSubnetb
      VpcId:
        Ref: VPC
      Tags:
        - Key: Name
          Value: !Sub "${Name}-private-subnet-zone2"
        - Key: "kubernetes.io/role/internal-elb"
          Value: 1

  PrivateSubnetAZ2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnetAZ2
      RouteTableId: !Ref PrivateRouteTableAZ2

  PrivateSubnetAZ3:
    Type: AWS::EC2::Subnet
    Metadata:
      Comment: Subnet AZ 3
    Properties:
      AvailabilityZone: !Select [ 2,!GetAZs ]
      CidrBlock:
        Ref: PrivateSubnetc
      VpcId:
        Ref: VPC
      Tags:
        - Key: Name
          Value: !Sub "${Name}-private-subnet-zone3"
        - Key: "kubernetes.io/role/internal-elb"
          Value: 1

  PrivateSubnetAZ3RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnetAZ3
      RouteTableId: !Ref PrivateRouteTableAZ3

  ControlPlaneSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Cluster communication with worker nodes
      VpcId: !Ref VPC

  SGGlooK8sIngress:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: Gloo Security Group
      VpcId: !Ref VPC
      GroupName:
        Fn::Sub: "${Name}-security-group"
      SecurityGroupIngress:
        - IpProtocol: tcp
          CidrIp: 0.0.0.0/0
          FromPort: 80
          ToPort: 80
        - IpProtocol: tcp
          CidrIp: 0.0.0.0/0
          FromPort: 443
          ToPort: 443
        - IpProtocol: tcp
          CidrIp: 0.0.0.0/0
          FromPort: 8080
          ToPort: 8080
        - IpProtocol: tcp
          CidrIp: 0.0.0.0/0
          FromPort: 8443
          ToPort: 8443
        - IpProtocol: tcp
          CidrIp: 0.0.0.0/0
          FromPort: 9900
          ToPort: 9900
        - IpProtocol: tcp
          CidrIp: 0.0.0.0/0
          FromPort: 15021
          ToPort: 15021
        - IpProtocol: tcp
          CidrIp: 0.0.0.0/0
          FromPort: 15443
          ToPort: 15443
        - IpProtocol: tcp
          CidrIp: 0.0.0.0/0
          FromPort: 15012
          ToPort: 15012
        - IpProtocol: tcp
          CidrIp: 0.0.0.0/0
          FromPort: 15012
          ToPort: 15017
Outputs:
  VpcId:
    Description: VPC id
    Value: !Ref VPC
  
  ControlPlaneSecurityGroupId:
    Description: The Cluster Control Plane GroupId
    Value: !Ref ControlPlaneSecurityGroup
  
  SecurityGroupIds:
    Description: Security Group id
    Value: !Join [",", [!Ref ControlPlaneSecurityGroup, !Ref SGGlooK8sIngress]]

  SubnetIds:
    Description: List of Subnets in the VPC
    Value:
      !Join [
        ",",
        [
          !Ref PublicSubnetAZ1,
          !Ref PublicSubnetAZ2,
          !Ref PublicSubnetAZ3,
          !Ref PrivateSubnetAZ1,
          !Ref PrivateSubnetAZ2,
          !Ref PrivateSubnetAZ3,
        ],
      ]
